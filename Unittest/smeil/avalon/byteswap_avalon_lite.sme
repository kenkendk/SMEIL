// This is a test function used to test the parser and code generator,
// it does not work correctly

type avlite: {
    ready: bool;
    valid: bool;
    value: u32;
};


proc byteswap(in upstream: avlite, out downstream: avlite)
    var state : int = 0;
{
    switch state {
        case 4 {
            // Data has been consumed
            downstream.valid = false;
            state = 0;            
        }
        case 3 {
            // Once the data has been read, wait one clock
            if (downstream.ready) {
                state = 4;
            }
        }
        case 2 {
            // We can now write
            downstream.valid = true;
            if (downstream.ready) {
                state = 4;
            } else {
                state = 3;
            }
        }
        case 1 {
            // Wait for input
            if (upstream.valid) {
                downstream.value = upstream.value << 16 | upstream.value >> 16;
                upstream.ready = false;
                state = 2;
            }
        }
        default {
            upstream.ready = true;
            state = 1;
        }         
    }
}

network main (in source: avlite, out target: avlite) {
    instance _ of byteswap(source, target);    
}
