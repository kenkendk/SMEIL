const datalen: int = 4;
type tdata: i32;

type tarr: [datalen]tdata;
type tinbus: { 
    val: tdata; 
    valid: bool;
    reset: bool;
};

type toutbus: { 
    val: tdata; 
    valid: bool = false;
};

proc fir(in inbus: tinbus)
    bus firout {
       val: i32 = 0;
       valid: bool = false;
    };
    var data: tarr;
    var ix: int = 0;
    var cnt: int = datalen;
    var sum: int = 0;
{
    // Avoid latches by always setting outputs
    firout.valid = false;
    firout.val = sum;

    // Clear the array on reset
    if (inbus.reset) 
    {
        ix = 0;
        cnt = datalen;
        for i = 0 to datalen
        {
             data[i] = 0;
        }
    }
    elif (inbus.valid)
    {
        // Remove the old value
        sum = sum - data[ix];
        // Go to next element
        if (ix == datalen - 1) {
            ix = 0; 
        } else {
            ix = ix + 1;
        }
        // Shift in the new value
        data[ix] = inbus.val;

        // Update sum and report
        sum = sum + inbus.val;
        firout.val = sum / datalen;

        // Check if we have filled up the FIR
        if (cnt <= 1)
        {
            cnt = 0;
            firout.valid = true;
        }
        else
        {
            cnt = cnt - 1;
        }
    }
}

network fir_net(in source: tinbus, out dest: toutbus) {
    instance fir_inst of fir(source);

    connect 
        fir_inst.firout -> dest;
}
